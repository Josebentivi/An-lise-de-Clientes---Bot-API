import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import warnings
import requests
import matplotlib.pyplot as plt
from time import sleep
import os
import threading
#estilos = [ 'dark_background', 'fast', 'fivethirtyeight','Solarize_Light2', '_classic_test_patch', '_mpl-gallery', '_mpl-gallery-nogrid', 'bmh', 'classic', 'ggplot', 'grayscale', 'seaborn-v0_8', 'seaborn-v0_8-bright', 'seaborn-v0_8-colorblind', 'seaborn-v0_8-dark', 'seaborn-v0_8-dark-palette', 'seaborn-v0_8-darkgrid', 'seaborn-v0_8-deep', 'seaborn-v0_8-muted', 'seaborn-v0_8-notebook', 'seaborn-v0_8-paper', 'seaborn-v0_8-pastel', 'seaborn-v0_8-poster', 'seaborn-v0_8-talk', 'seaborn-v0_8-ticks', 'seaborn-v0_8-white', 'seaborn-v0_8-whitegrid', 'tableau-colorblind10']
plt.style.use('seaborn-v0_8-pastel')
#plt.style.use('dark_background') 


ads=214

def Carregando():
    porcentagem = 0
    cols = st.columns(3)
    with cols[1]:
        my_bar = st.progress(porcentagem, text="Aprimorando plataforma...")
        tempo=1
        sleep(1)
        CarregandoInicio = ["Carregando leis e jurisprud√™ncia...","Carregando doutrinas...","Finalizando melhoria...","Pronto!"]
        for texto in CarregandoInicio:
            porcentagem += 25
            my_bar.progress(porcentagem, text=texto)
            tempo+=0.25
            sleep(tempo)
        my_bar.empty()

#x = threading.Thread(target=alarme, args=())
#x.start()

# Suppress Streamlit's ScriptRunContext warning
warnings.filterwarnings("ignore", message="missing ScriptRunContext")

# Configura√ß√£o inicial da p√°gina
st.set_page_config(page_title="Visualiza√ß√£o dos Clientes JurisAI", layout="wide")
#Carregando()
#chave_secreta = st.text_input("Senha de acesso", type="password")
chave_secreta="JurisAI"
if not chave_secreta and False:
    st.info("Por favor, adicione a sua senha de acesso.", icon="üóùÔ∏è")
else:    
    url = "http://52.2.202.37/streamlit/"
    data = {"cliente": chave_secreta,
            "produto": "jurisaiusuarios"}
    response = requests.post(url, json=data, timeout=5*60)
    if response.status_code == 200:  
        saida = response.json()["saida"]
        print(saida)
        erro = response.json()["erro"]
        print(erro)
    else:  
        print("Erro na requisi√ß√£o")
        print(response.status_code)
        print(response.text)
        st.stop()    

    # Upload do arquivo CSV
    #st.sidebar.header("Carregar arquivo CSV")
    #uploaded_file = st.sidebar.file_uploader("Escolha um arquivo CSV", type="csv")

    #if uploaded_file is not None:
    # Leitura dos dados
    #df = pd.read_csv(uploaded_file)
    df = pd.DataFrame(saida,columns=["Usuario","Data","Fonte","Obs","Cr√©ditos Fun√ß√£o 1","Cr√©ditos Fun√ß√£o 2"])
    df = df[["Usuario","Data","Cr√©ditos Fun√ß√£o 1","Cr√©ditos Fun√ß√£o 2"]]
    #df = df[~df["Data"].astype(str).str.contains("2025-04")]

    # Vimero de clientes
    total_clientes = df["Usuario"].nunique()
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown(
            f"""
            <div style="background-color: #0e1117; padding: 10px; border-radius: 5px; text-align: center;">
                <p style="color: white; font-size: 18px; margin: 0;">N√∫mero de usu√°rios</p>
                <p style="color: white; font-size: 32px; font-weight: bold; margin: 0;">{total_clientes}</p>
            </div>
            """,
            unsafe_allow_html=True
        )
    with col2:
        st.markdown(
            f"""
            <div style="background-color: #0e1117; padding: 10px; border-radius: 5px; text-align: center;">
                <p style="color: white; font-size: 18px; margin: 0;">Acesso Org√¢nico</p>
                <p style="color: green; font-size: 32px; font-weight: bold; margin: 0;">{total_clientes-ads}</p>
            </div>
            """,
            unsafe_allow_html=True
        )
    with col3:
        st.markdown(
            f"""
            <div style="background-color: #0e1117; padding: 10px; border-radius: 5px; text-align: center;">
                <p style="color: white; font-size: 18px; margin: 0;">Acesso Ads</p>
                <p style="color: blue; font-size: 32px; font-weight: bold; margin: 0;">{ads}</p>
            </div>
            """,
            unsafe_allow_html=True
        )
    
    st.title("An√°lise de Log de Registro dos Clientes")
    #df = pd.read_csv(uploaded_file)
    df["Data"] = pd.to_datetime(df["Data"], format="%Y/%m/%d %H:%M:%S")
    st.header("Visualiza√ß√£o dos Dados")
    st.write(df)

    # Plot do total de usu√°rios por m√™s (cumulativo)
    df_first = df.sort_values("Data").drop_duplicates(subset="Usuario", keep="first")
    df_first["AnoMes"] = df_first["Data"].dt.to_period("M").astype(str)
    total_users_by_month = df_first.groupby("AnoMes").size().cumsum().reset_index(name="Total Usu√°rios")
    fig, ax = plt.subplots()
    ax.plot(total_users_by_month["AnoMes"], total_users_by_month["Total Usu√°rios"], marker="o", linestyle="-")
    ax.set_xlabel("Ano/M√™s")
    ax.set_ylabel("Total de Usu√°rios")
    ax.set_title("Total de Usu√°rios por M√™s")
    plt.xticks(rotation=45)
    st.pyplot(fig)

    st.subheader("Crescimento de Usu√°rios")
    # Considera o primeiro registro de cada usu√°rio
    df_first = df.sort_values("Data").drop_duplicates(subset="Usuario", keep="first")
    df_first["AnoMes"] = df_first["Data"].dt.to_period("M").astype(str)
    crescimento = df_first.groupby("AnoMes").size().reset_index(name="Novos Usu√°rios")
    fig1, ax1 = plt.subplots()
    ax1.plot(crescimento["AnoMes"], crescimento["Novos Usu√°rios"], marker="o")
    ax1.set_xlabel("Ano/M√™s")
    ax1.set_ylabel("N√∫mero de Usu√°rios Novos")
    ax1.set_title("Crescimento de Usu√°rios ao longo do tempo")
    plt.xticks(rotation=45)
    st.pyplot(fig1)

    #st.subheader("2. An√°lise de Disponibilidade de Cr√©ditos")
    #col1, col2 = st.columns(2)
    #with col1:
    #    st.write("Cr√©ditos Fun√ß√£o 1")
    #    fig2, ax2 = plt.subplots()
    #    ax2.hist(df["Cr√©ditos Fun√ß√£o 1"], bins=20, color="skyblue", edgecolor="black")
    #    ax2.set_xlabel("Cr√©ditos")
    #    ax2.set_ylabel("Frequ√™ncia")
    #    ax2.set_title("Distribui√ß√£o dos Cr√©ditos Fun√ß√£o 1")
    #    st.pyplot(fig2)
    #    media1 = df["Cr√©ditos Fun√ß√£o 1"].mean()
    #    mediana1 = df["Cr√©ditos Fun√ß√£o 1"].median()
    #    st.write(f"M√©dia: {media1:.2f}, Mediana: {mediana1}")

    #with col2:
    #    st.write("Cr√©ditos Fun√ß√£o 2")
    #    fig3, ax3 = plt.subplots()
    #    ax3.hist(df["Cr√©ditos Fun√ß√£o 2"], bins=20, color="salmon", edgecolor="black")
    #    ax3.set_xlabel("Cr√©ditos")
    #    ax3.set_ylabel("Frequ√™ncia")
    #    ax3.set_title("Distribui√ß√£o dos Cr√©ditos Fun√ß√£o 2")
    #    st.pyplot(fig3)
    #    media2 = df["Cr√©ditos Fun√ß√£o 2"].mean()
    #    mediana2 = df["Cr√©ditos Fun√ß√£o 2"].median()
    #    st.write(f"M√©dia: {media2:.2f}, Mediana: {mediana2}")

    
    #st.markdown("### Relat√≥rio Resumido")
    #st.write("O relat√≥rio evidencia o crescimento de usu√°rios, a distribui√ß√£o dos cr√©ditos dispon√≠veis e a taxa de reten√ß√£o dos clientes.")





    st.title("Dashboard de Visualiza√ß√£o do comportamento de clientes - JurisAI")

    url = "http://52.2.202.37/streamlit/"
    data = {"cliente": chave_secreta,
            "produto": "jurisai"}
    response = requests.post(url, json=data, timeout=5*60)
    if response.status_code == 200:  
        saida = response.json()["saida"]
        print(saida)
        erro = response.json()["erro"]
        print(erro)
    else:  
        print("Erro na requisi√ß√£o")
        print(response.status_code)
        print(response.text)
        st.stop()    

    # Upload do arquivo CSV
    #st.sidebar.header("Carregar arquivo CSV")
    #uploaded_file = st.sidebar.file_uploader("Escolha um arquivo CSV", type="csv")

    #if uploaded_file is not None:
    if True:
        # Leitura dos dados
        #df = pd.read_csv(uploaded_file)
        df = pd.DataFrame(saida,columns=["Usuario","Acao","Data"])

        # Verifica√ß√£o dos campos esperados
        expected_columns = {'Usuario', 'Acao', 'Data'}
        if not expected_columns.issubset(df.columns):
            st.error("O arquivo CSV deve conter as colunas: Usuario, Acao, Data")
        else:
            # Convers√£o da coluna Data para datetime
            df['Data'] = pd.to_datetime(df['Data'], format="%Y/%m/%d %H:%M:%S", errors="coerce")
            df.dropna(subset=['Data'], inplace=True)

            # Enriquecimento dos dados com extra√ß√£o de vari√°veis temporais
            df['Ano'] = df['Data'].dt.year
            df['Mes'] = df['Data'].dt.month
            df['Dia'] = df['Data'].dt.day
            df['Hora'] = df['Data'].dt.hour
            df['Dia_da_Semana'] = df['Data'].dt.day_name()

            # Remo√ß√£o de duplicidades
            df.drop_duplicates(inplace=True)

            # Agrupamento de a√ß√µes relacionadas
            def agrupar_acoes(acao):
                if acao in ["Consulta JurisBrasil falhou", "Consulta JurisBrasil Concluida", "Consulta JurisBrasil utilizada"]:
                    return "Consulta JurisBrasil"
                return acao

            df['Acao_Agrupada'] = df['Acao'].apply(agrupar_acoes)

            # Exibi√ß√£o dos dados carregados
            st.subheader("Visualiza√ß√£o das Ultimas Intera√ß√µes")
            st.dataframe(df.tail(50))

            st.subheader("An√°lise de Reten√ß√£o de Usu√°rios")    
            # Calcula a diferen√ßa entre o primeiro e o √∫ltimo acesso para cada usu√°rio
            #df["Data"] = pd.to_datetime(df["Data"], format="%Y-%m-%d %H:%M:%S", errors="coerce")
            
            # C√°lculo da reten√ß√£o: tempo entre o primeiro e o √∫ltimo acesso para cada usu√°rio
            retencao = df.groupby("Usuario")["Data"].agg(["min", "max"]).reset_index()
            retencao["Retencao_Dias"] = (retencao["max"] - retencao["min"]).dt.days
            st.write("An√°lise de Reten√ß√£o de Usu√°rios (em dias)")
            st.dataframe(retencao)

            # Estat√≠sticas b√°sicas de reten√ß√£o
            media_retencao = retencao["Retencao_Dias"].mean()
            mediana_retencao = retencao["Retencao_Dias"].median()
            st.write(f"Tempo m√©dio de reten√ß√£o: {media_retencao:.1f} dias")
            st.write(f"Mediana do tempo de reten√ß√£o: {mediana_retencao} dias")

            # Visualiza√ß√£o da distribui√ß√£o de reten√ß√£o
            fig_ret, ax_ret = plt.subplots(figsize=(10, 6))
            sns.histplot(retencao["Retencao_Dias"], bins=20, kde=True, ax=ax_ret, color='purple')
            ax_ret.set_title("Distribui√ß√£o do Tempo de Reten√ß√£o dos Usu√°rios")
            ax_ret.set_xlabel("Tempo de reten√ß√£o (dias)")
            ax_ret.set_ylabel("N√∫mero de Usu√°rios")
            st.pyplot(fig_ret)
            plt.close(fig_ret)


            # 1. Frequ√™ncia e Volume de A√ß√µes
            st.subheader("Contagem de A√ß√µes do Servidor")
            contagem_acoes = df['Acao_Agrupada'].value_counts().reset_index()
            contagem_acoes.columns = ['Acao', 'Contagem']
            st.dataframe(contagem_acoes)

            # Gr√°fico de barras para a frequ√™ncia das a√ß√µes do Servidor
            fig1, ax1 = plt.subplots(figsize=(10, 6))
            sns.barplot(x='Contagem', y='Acao', data=contagem_acoes, ax=ax1)
            ax1.set_title("Frequ√™ncia de A√ß√µes")
            ax1.set_xlabel("Intera√ß√µes")
            ax1.set_ylabel("Tipo de A√ß√£o")
            st.pyplot(fig1)
            plt.close(fig1)  # Fecha a figura para liberar mem√≥ria

            # 1.5. Frequ√™ncia e Volume de A√ß√µes do Usu√°rio
            st.subheader("Contagem de A√ß√µes do Usu√°rio")
            contagem_acoes = df['Acao_Agrupada'].value_counts().reset_index()
            contagem_acoes.columns = ['Acao', 'Contagem']
            #st.dataframe(contagem_acoes)

            ordered_actions = ['Consulra PDF chat utilizado', 'Consulta Vade utilizada', 'Consulta Servidor utilizada', 'Consulta Doutrina utilizada', 'Consulta JurisBrasil utilizada', 'Consulta Leis utilizada', 'Criar documenta√ß√£o utilizada', 'Audio utilizado', 'Voz utilizada', 'Imagem carregada', 'PDF enviada', 'PDF enviado', 'Papo utilizado', 'Consulta removida', 'Consulta adicionada', 'Bateria removida', 'Bateria adicionada', 'Documenta√ß√£o utilizada', 'Vade utilizado', 'CGU utilizada', 'Doutrina utilizada', 'Leis utilizada', 'Consulta PDF utilizada', 'Bibliografia utilizada']
            contagem_acoes = contagem_acoes.set_index("Acao").reindex(ordered_actions, fill_value=0).reset_index()
            contagem_acoes = contagem_acoes[contagem_acoes['Contagem'] > 0]
            contagem_acoes = contagem_acoes.sort_values("Contagem", ascending=False)

            # Gr√°fico de barras para a frequ√™ncia das a√ß√µes
            fig1, ax1 = plt.subplots(figsize=(10, 6))
            sns.barplot(x='Contagem', y='Acao', data=contagem_acoes, ax=ax1)
            ax1.set_title("Frequ√™ncia de A√ß√µes")
            ax1.set_xlabel("Intera√ß√µes")
            ax1.set_ylabel("Tipo de A√ß√£o")
            st.pyplot(fig1)
            plt.close(fig1)  # Fecha a figura para liberar mem√≥ria

            # 2. Evolu√ß√£o Temporal das A√ß√µes (Di√°ria)
            st.subheader("Evolu√ß√£o Temporal das A√ß√µes")
            df['Data_Somente'] = df['Data'].dt.date
            acao_selecionada = st.selectbox("Selecione uma a√ß√£o para analisar a evolu√ß√£o temporal", df['Acao_Agrupada'].unique())
            df_acao = df[df['Acao_Agrupada'] == acao_selecionada]
            serie_temporal = df_acao.groupby("Data_Somente").size()
            st.line_chart(serie_temporal)

            # 3. An√°lise de Sucesso vs Falhas para Consulta JurisBrasil
            st.subheader("Sucesso vs. Falhas - Consulta JurisBrasil")
            df_juris = df[df['Acao'].isin(["Consulta JurisBrasil Concluida", "Consulta JurisBrasil falhou"])]
            if not df_juris.empty:
                resumo_juris = df_juris['Acao'].value_counts().reset_index()
                resumo_juris.columns = ['Acao', 'Contagem']
                #st.dataframe(resumo_juris)
                fig2, ax2 = plt.subplots(figsize=(6, 4))
                sns.barplot(x='Acao', y='Contagem', data=resumo_juris, ax=ax2)
                ax2.set_title("Consulta JurisBrasil: Conclu√≠da vs. Falhou")
                st.pyplot(fig2)
            else:
                st.info("N√£o h√° dados suficientes para an√°lise de 'Consulta JurisBrasil'.")

            # 4. An√°lise de Comportamento do Usu√°rio: Distribui√ß√£o de Atividade
            st.subheader("Distribui√ß√£o de Atividade dos Usu√°rios")
            usuarios_atividade = df['Usuario'].value_counts().reset_index()
            usuarios_atividade.columns = ['Usuario', 'Acoes']
            st.dataframe(usuarios_atividade.head(20))
            fig3, ax3 = plt.subplots(figsize=(10, 6))
            sns.histplot(usuarios_atividade['Acoes'], bins=20, kde=True, ax=ax3)
            ax3.set_title("Distribui√ß√£o do N√∫mero de A√ß√µes por Usu√°rio")
            ax3.set_xlabel("Intera√ß√µes")
            ax3.set_ylabel("Usu√°rios")
            st.pyplot(fig3)

            # 4.1. An√°lise de Comportamento do Usu√°rio: Distribui√ß√£o de Uso Ativo
            st.subheader("Distribui√ß√£o de Uso Ativo dos Usu√°rios")
            #st.dataframe(df[(df['Acao'] == 'Leis utilizada') | (df['Acao'] == 'Papo utilizado')])
            usuarios_atividade = df[(df['Acao'] == 'Bateria removida') | (df['Acao'] == 'Consulta removida')]['Usuario'].value_counts().reset_index()
            usuarios_atividade.columns = ['Usuario', 'Acoes']
            st.dataframe(usuarios_atividade)
            fig3, ax3 = plt.subplots(figsize=(10, 6))
            sns.histplot(usuarios_atividade['Acoes'], bins=20, kde=True, ax=ax3)
            ax3.set_title("Distribui√ß√£o do N√∫mero de A√ß√µes de Uso Ativo por Usu√°rio")
            ax3.set_xlabel("Intera√ß√µes")
            ax3.set_ylabel("Usu√°rios")
            st.pyplot(fig3)

            # 5. Heatmap: Atividade por Hora e Dia da Semana
            st.subheader("Heatmap de Atividade (Hora vs Dia da Semana)")
            pivot_table = df.pivot_table(index='Dia_da_Semana', columns='Hora', values='Acao', aggfunc='count').fillna(0)
            # Reordenar dias da semana
            ordem_dias = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
            pivot_table = pivot_table.reindex(ordem_dias)

            pivot_table.index = ['Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta', 'S√°bado', 'Domingo']
            fig4, ax4 = plt.subplots(figsize=(12, 6))
            sns.heatmap(pivot_table, cmap="YlGnBu", ax=ax4)
            ax4.set_title("N√∫mero de A√ß√µes por Hora e Dia da Semana")
            ax4.set_xlabel("Intera√ß√µes")
            ax4.set_ylabel("Dia da Semana")
            st.pyplot(fig4)
            
            # 6. An√°lise de Tempo entre A√ß√µes (para usu√°rios individuais)
            st.subheader("Tempo entre A√ß√µes (Usu√°rio Individual)")
            usuario_id = st.text_input("Digite o ID do Cliente (10 d√≠gitos) para analisar o tempo entre a√ß√µes")
            if usuario_id:
                df_usuario = df[df['Usuario'] == int(usuario_id)]
                if len(df_usuario) >= 2:
                    df_usuario = df_usuario.sort_values("Data")
                    df_usuario['Tempo_entre'] = df_usuario['Data'].diff().dt.total_seconds()
                    st.dataframe(df_usuario[['Data', 'Acao', 'Tempo_entre']])
                    st.write("Tempo m√©dio entre a√ß√µes (segundos): ", df_usuario['Tempo_entre'].mean())
                else:
                    st.info("O usu√°rio possui poucas a√ß√µes para an√°lise.")
    else:
        st.info("Por favor, carregue um arquivo CSV para prosseguir.")
